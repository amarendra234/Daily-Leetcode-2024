class Solution {
public:
    int smallestChair(vector<vector<int>>& times, int targetFriend) {
        int targetfriendlist=times[targetFriend][0];
        int n=times.size();
        sort(begin(times),end(times));
        int seatcount=0;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        priority_queue<int,vector<int>,greater<int>>Emptyseat;
        for(int i=0;i<times.size();i++){
            int arrival=times[i][0];
            int departure=times[i][1];
            if(pq.empty()){
                if(arrival==targetfriendlist){
                    return seatcount;
                }
                pq.push({departure,seatcount});
                seatcount++;
            }else{
                while(!pq.empty() and arrival>=pq.top().first){
                    Emptyseat.push(pq.top().second);
                    pq.pop();
                }
                if(!Emptyseat.empty()){
                    if(arrival==targetfriendlist){
                        return Emptyseat.top();
                    }else{
                        pq.push({departure,Emptyseat.top()});
                        Emptyseat.pop();
                    }
                }else{
                      if(arrival==targetfriendlist){
                        return seatcount;;
                      }else{
                          pq.push({departure,seatcount});
                          seatcount++;
                      }
                }
            }
        }
        return -1;

    }
};
